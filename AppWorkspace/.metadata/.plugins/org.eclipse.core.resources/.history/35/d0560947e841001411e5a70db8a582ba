package com.babycartest;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Set;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;



public class MainActivity extends Activity {

	public final static String EXTRA_MESSAGE = "com.babycartest.MESSAGE";
	
	
    private static final int REQUEST_ENABLE_BT = 12;
    public int numberOfPairedDevices;
    
    private Button enableBT; 
    private Button showList, tx1, tx0;
    //BluetoothSocket btSocket = null;
    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    String[] values = new String[]{};
    String test;
    public static OutputStream outputStream;
    public static InputStream inputStream;
    byte delimiter = 10;
    boolean stopWorker = false;
    Handler handler = new Handler();
    int readBufferPosition = 0;
    TextView Result;
    byte[] readBuffer = new byte[1024];
    ArrayList <String> list = new ArrayList <String>();
    ArrayList <String> MAC = new ArrayList <String>();
    public static String bluetoothDevice;
    
    
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
               
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
        }
  
        pairedDevices();
        final ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
  	          android.R.layout.simple_list_item_1, android.R.id.text1, list);
        final ArrayAdapter<String> adapter_MAC = new ArrayAdapter<String>(this,
        		android.R.layout.simple_list_item_1,android.R.id.text1, MAC);
     
        Result = (TextView)findViewById(R.id.textView1);
        enableBT = (Button)findViewById(R.id.button1);
        showList = (Button)findViewById(R.id.button2);
        tx1 = (Button)findViewById(R.id.button3);
        tx0 = (Button)findViewById(R.id.button4);
        
        enableBT.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	if (!mBluetoothAdapter.isEnabled()) {
            		Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            		startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            	
            	}
            	else{
            		Context context = getApplicationContext();
                    CharSequence text = "Bluetooth Already Enabled";

                    Toast toast = Toast.makeText(context, text, Toast.LENGTH_SHORT);
                    
            		toast.show();}
            	}
        });
        
        tx1.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	writeData("1"); 
            	
            }	
            	
        });
        
        
        tx0.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	writeData("0");
            	
            }	
            	
        });
        
        showList.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				
//				changeActivity(v);			
				AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
		        alertDialog.setTitle("Select Device");
		        alertDialog.setSingleChoiceItems(adapter, -1, new DialogInterface.OnClickListener(){
		        	public void onClick(DialogInterface dialog, int which){
		        		MainActivity.bluetoothDevice = adapter_MAC.getItem(which);
		        		
		        		Toast.makeText(getApplicationContext(), MainActivity.bluetoothDevice, Toast.LENGTH_LONG).show();
		        		dialog.cancel();
		        	}
		        });	           
		        alertDialog.show();
		        
			}
		});
      
//        beginListenForData();
        
    }
 
    public void changeActivity(View view) {
        Intent intent = new Intent(this, ListViewBluetooth.class);
        Set<BluetoothDevice> devices = mBluetoothAdapter.getBondedDevices();
        numberOfPairedDevices = devices.size();
        list.clear();
        for (BluetoothDevice device : devices) {
        	list.add(device.getName()+"\n"+device.getAddress());  
        	 }
        intent.putExtra(EXTRA_MESSAGE, list);
        startActivity(intent);
    }
    
    public void pairedDevices() {
       
        Set<BluetoothDevice> devices = mBluetoothAdapter.getBondedDevices();
        list.clear();
        MAC.clear();
        for (BluetoothDevice device : devices) {
        	list.add(device.getName()+"\n"+device.getAddress());  
        	MAC.add(device.getAddress());
        	 }
    }
 
    
    private void writeData(String data) {
			try {
				outputStream = ListViewBluetooth.btSocket.getOutputStream();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		String message = data;
/* In my example, I put a button that invoke this method and send a string to it */
		byte[] msgBuffer = message.getBytes();

			try {
				outputStream.write(msgBuffer);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
    
    
    public void beginListenForData()   {
		 try {
				inputStream = ListViewBluetooth.btSocket.getInputStream();
			} catch (IOException e) {
			}
		 
	        Thread workerThread = new Thread(new Runnable()
	        {
	            public void run()
	            {                
	               while(!Thread.currentThread().isInterrupted() && !stopWorker)
	               {
	                    try 
	                    {
	                        int bytesAvailable = inputStream.available();                        
	                        if(bytesAvailable > 0)
	                        {
	                            byte[] packetBytes = new byte[bytesAvailable];
	                            inputStream.read(packetBytes);
	                            for(int i=0;i<bytesAvailable;i++)
	                            {
	                                byte b = packetBytes[i];
	                                if(b == delimiter)
	                                {
	                                    byte[] encodedBytes = new byte[readBufferPosition];
	                                    System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
	                                    final String data = new String(encodedBytes, "US-ASCII");
	                                    readBufferPosition = 0;
	                                    handler.post(new Runnable()
	                                    {
	                                        public void run()
	                                        {
	                                        	
	                                        	if(Result.getText().toString().equals("..")) {
	                                        		Result.setText(data);
	                                        	} else {
	                                        		Result.append("\n"+data);
	                                        	}
	                                        	
	                                        	/* You also can use Result.setText(data); it won't display multilines
	                                        	*/
	                                        	
	                                        }
	                                    });
	                                }
	                                else
	                                {
	                                    readBuffer[readBufferPosition++] = b;
	                                }
	                            }
	                        }
	                    } 
	                    catch (IOException ex) 
	                    {
	                        stopWorker = true;
	                    }
	               }
	            }
	        });

	        workerThread.start();
	    }
    
    
    
}

