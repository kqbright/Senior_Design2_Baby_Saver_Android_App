package com.babycartest;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Set;
import java.util.UUID;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;



public class MainActivity extends Activity {

	public final static String EXTRA_MESSAGE = "com.babycartest.MESSAGE";
		
    private static final int REQUEST_ENABLE_BT = 12;
  
    private Button enableBT; 
    private Button showList, tx1, tx0;
    TextView Result, label, tempLabel;
    
    String test;
    public static String bluetoothDevice;
    public int numberOfPairedDevices;
    
    public static OutputStream outputStream;
    
    public static InputStream inputStream;
    byte delimiter = 10;
    Handler handler = new Handler();
    byte[] readBuffer;
	int readBufferPosition;
	int counter;
	Thread workerThread;
	//int intData = 0;
   	int tempD = 0;
	String val = "";
	volatile boolean stopWorker;  
	
    ArrayList <String> list = new ArrayList <String>();
    ArrayList <String> MAC = new ArrayList <String>();
    
    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    public static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
	public static BluetoothSocket btSocket = null;
    public static int intData = 0;
    String str = "0";
    
    //========= onCREATE ===========
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
               
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
        }
  

        final ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
  	          android.R.layout.simple_list_item_1, android.R.id.text1, list);
        final ArrayAdapter<String> adapter_MAC = new ArrayAdapter<String>(this,
        		android.R.layout.simple_list_item_1,android.R.id.text1, MAC);
     
        label = (TextView)findViewById(R.id.label);
        tempLabel = (TextView)findViewById(R.id.tempValue);
        Result = (TextView)findViewById(R.id.textView1);
        enableBT = (Button)findViewById(R.id.button1);
        showList = (Button)findViewById(R.id.button2);
        tx1 = (Button)findViewById(R.id.button3);
        tx0 = (Button)findViewById(R.id.button4);
        
        enableBT.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	if (!mBluetoothAdapter.isEnabled()) {
            		Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            		startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            		
            	
            	}
            	else{
            		Context context = getApplicationContext();
                    CharSequence text = "Bluetooth Already Enabled";

                    Toast toast = Toast.makeText(context, text, Toast.LENGTH_SHORT);
                    
            		toast.show();}
            	
            	}
            
            
        });
        
        tx1.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	writeData("1"); 
            	
            }	
            	
        });
        
        
        tx0.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	writeData("0");
            	
            }	
            	
        });
        
        showList.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				pairedDevices();
						
				AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
		        alertDialog.setTitle("Select Device");
		        alertDialog.setSingleChoiceItems(adapter, -1, new DialogInterface.OnClickListener(){
		        	public void onClick(DialogInterface dialog, int which){
		        		MainActivity.bluetoothDevice = adapter_MAC.getItem(which);	        		
		        			        		
		        		dialog.cancel();
		        		Connect(MainActivity.bluetoothDevice);
		        		
		        	}
		        });	           
		        alertDialog.show();
		        
		        
			}
		});
        
        
        handler.post(new Runnable(){
        
        	//String test2 = "5";
        	//String test1 = "";
            @Override
            public void run(){
                // change your text here
            	//try{
//            		intData = Integer.parseInt(test2);//convert to int
//            		test1 = Integer.toString(intData);//convert back to string
//            		tempLabel.setText(test1);
            		
            		
            		//intData = Integer.parseInt(str);//convert to int

            		//if((intData >= 208) || (intData <= 223)){
//            			//tempD = (intData << 4);
//            			tempD = intData;
             		//	val = Integer.toString(intData);//converts to string
            		//	tempLabel.setText(val);
            		//}
            	//intData = 0;
            	//String updateTest = str;
            	//Integer i = Integer.parseInt(str, 16);
            	//intData = Integer.parseInt(str, 16);
            	
            	
            		//intData = Integer.valueOf(updater);
            		
            	
            
            		//intData = Integer.parseInt(str, 16);            		
            		
            		//String updater = "" + intData;  	
            	tempUpdate(str);
            		//tempLabel.setText(updater);
            	//intData = Integer.valueOf(updater);
            	//intData = Integer.parseInt(updater, 16);
            	//if(intData == 50){
            		//intData++;
            		//updater = Integer.toString(intData);
            	//}
            		
            		
            	//}
            	//catch(NumberFormatException nfe){
            		
            	//}
            	//tempLabel.setText("T1");
            	//tempUpdate(str);
            	            	
            	handler.postDelayed(this, 50);
            }
        });
        
    }
    
    public void pairedDevices() {
       
        Set<BluetoothDevice> devices = mBluetoothAdapter.getBondedDevices();
        list.clear();
        MAC.clear();
        for (BluetoothDevice device : devices) {
        	list.add(device.getName()+"\n"+device.getAddress());  
        	MAC.add(device.getAddress());
        	 }
    }
 
public void Connect(String MAC) {
    	
    	BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(MAC);
		Toast.makeText(getApplicationContext(), "Connecting...", Toast.LENGTH_LONG).show();
		mBluetoothAdapter.cancelDiscovery();
		try {
            btSocket = device.createRfcommSocketToServiceRecord(MY_UUID);
/* Here is the part the connection is made, by asking the device to create a
 *  RfcommSocket (Unsecure socket I guess), It map a port for us or something 
 *  like that */
                        
			btSocket.connect();
			Toast.makeText(getApplicationContext(), "Connected", Toast.LENGTH_LONG).show();
		} catch (IOException e) {
			try {
				btSocket.close();
			} catch (IOException e2) {
				Toast.makeText(getApplicationContext(), "Unable to end the connection", Toast.LENGTH_LONG).show();
			}
			Toast.makeText(getApplicationContext(), "Socket creation failed", Toast.LENGTH_LONG).show();
		}
		
		try {
			outputStream = btSocket.getOutputStream();
			inputStream = btSocket.getInputStream();
			beginListenForData();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
               /* this is a method used to read what the Arduino says for example when you write Serial.print("Hello world.") in your Arduino code */
	}
    
    
    private void writeData(String data) {
			try {
				outputStream = btSocket.getOutputStream();
				inputStream = btSocket.getInputStream();
				//beginListenForData();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		String message = data;
/* In my example, I put a button that invoke this method and send a string to it */
		byte[] msgBuffer = message.getBytes();

			try {
				outputStream.write(msgBuffer);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
    
    
    
    void beginListenForData()
    {
        final Handler handler = new Handler(); 
        final byte delimiter = 10; //This is the ASCII code for a newline character

        stopWorker = false;
        readBufferPosition = 0;
        readBuffer = new byte[1024];
        workerThread = new Thread(new Runnable()
        {
            public void run()
            {                
               while(!Thread.currentThread().isInterrupted() && !stopWorker)
               {
                    try 
                    {
                        int bytesAvailable = inputStream.available();                        
                        if(bytesAvailable > 0)
                        {
                            byte[] packetBytes = new byte[bytesAvailable];
                            inputStream.read(packetBytes);
                            for(int i=0;i<bytesAvailable;i++)
                            {
                                byte b = packetBytes[i];
                                if(b == delimiter)
                                {
                                	byte[] encodedBytes = new byte[readBufferPosition];
                                	System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
                                	final String data = new String(encodedBytes, "US-ASCII");
                                  	//final Integer data1 = new Integer(data);
                                  	
                                	readBufferPosition = 0;

                                    handler.post(new Runnable()
                                    {
                                        public void run()
                                        {
                                        	
                                        	//intData = data1;
                                        	//tempLabel.setText(data);
                                        	str = data.replaceAll("[\n\r]", "");
                                        	
                                        	
                                        }
                                    });
                                }
                                else
                                {
                                    readBuffer[readBufferPosition++] = b;
                                }
                            }
                        }
                    } 
                    catch (IOException ex) 
                    {
                        stopWorker = true;
                    }
               }
            }
        });

        workerThread.start();
    }
    
    
public void tempUpdate(String str){
	int intData = 0;
	intData = Integer.parseInt(str);
	int tempD = 0;
	int tempF = 0;
	String val = "";
	if((intData >= 208) && (intData <= 223)){
		tempD = (intData << 4);
		val = "" + tempD;
		tempLabel.setText(val);
	}
//	if((intData >= 240) && (intData <= 255)){
//		tempF = (intData & 255);
//		val = "" + tempF;
//		tempLabel.setText(val);
//	}
	
}
    

    
}

