package com.babycartest;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Pattern;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.NotificationManager;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.NotificationCompat;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	public final static String EXTRA_MESSAGE = "com.babycartest.MESSAGE";
		
    private static final int REQUEST_ENABLE_BT = 12;
  
    private Button enableBT; 
    private Button showList, tx1, tx0;
    TextView Result, label, tempLabel;
    ImageView circleConnected, circleBaby, circleClip;
    
    String test;
    public static String bluetoothDevice;
    public int numberOfPairedDevices;
    
    public static OutputStream outputStream;
    
    public static InputStream inputStream;
    byte delimiter = 10;
    Handler handler = new Handler();
    byte[] readBuffer;
	int readBufferPosition;
	int counter;
	int bits;
	Thread workerThread;
	//int intData = 0;
   	int tempD = 0;
	String val = "";
	int check = 0;
	int tempDisplay = 0;
	int baby = 0;
	int clip = 0;
	volatile boolean stopWorker;  
	int blue = 0;
	int kevin = 0;
	
	boolean checker;
	String checker2 = "";
	String tempString;
	BluetoothDevice device; 
	
    ArrayList <String> list = new ArrayList <String>();
    ArrayList <String> MAC = new ArrayList <String>();

    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    public static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
	public static BluetoothSocket btSocket = null;
    public static int intData = 0;
    String str = "0";
    private static Pattern validator = Pattern.compile("[aAbBcCdDeEfF0123456789]"); 
    
    private NotificationManager mNotificationManager; 
    private int notificationID1 = 111; 
    private int notificationID2 = 112;
    
    //private int numMessages = 0;

    //========= onCREATE ===========
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
               
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
        }
  
        final ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
  	          android.R.layout.simple_list_item_1, android.R.id.text1, list);
        final ArrayAdapter<String> adapter_MAC = new ArrayAdapter<String>(this,
        		android.R.layout.simple_list_item_1,android.R.id.text1, MAC);
        
     
        label = (TextView)findViewById(R.id.label);
        tempLabel = (TextView)findViewById(R.id.tempValue);
        Result = (TextView)findViewById(R.id.textView1);
        enableBT = (Button)findViewById(R.id.button1);
        showList = (Button)findViewById(R.id.button2);
        tx1 = (Button)findViewById(R.id.button3);
        tx0 = (Button)findViewById(R.id.button4);
        
        tx0.setEnabled(false);
        
        circleConnected = (ImageView)findViewById(R.id.circle1);
        circleBaby= (ImageView)findViewById(R.id.circle2);
        circleClip = (ImageView)findViewById(R.id.circle3);
        
		final IntentFilter filter = new IntentFilter();  
		filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
		filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED);
             
        enableBT.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	if (!mBluetoothAdapter.isEnabled()) {
            		Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            		startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            		
            	
            	}
            	else{
            		Context context = getApplicationContext();
                    CharSequence text = "Bluetooth Already Enabled";

                    Toast toast = Toast.makeText(context, text, Toast.LENGTH_SHORT);
                    
            		toast.show();}
            	
            	}
            
            
        });
        
        tx1.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	
            	
            }	
            	
        });
        
        
        tx0.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
            	turnOffSounds();
            	
            }	
            	
        });
        
        showList.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				pairedDevices();
						
				AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
		        alertDialog.setTitle("Select Device");
		        alertDialog.setSingleChoiceItems(adapter, -1, new DialogInterface.OnClickListener(){
		        	public void onClick(DialogInterface dialog, int which){
		        		MainActivity.bluetoothDevice = adapter_MAC.getItem(which);	        		
		        			        		
		        		dialog.cancel();
		        		Connect(MainActivity.bluetoothDevice);
		        		
		        	}
		        });	           
		        alertDialog.show();
		        
		        
			}
		});
           
        handler.post(new Runnable(){
        	//update values here
            @Override
            public void run(){

            	//updates the values on main activity
            	
            	
            		//do this next time kevin
            		//check string for unwanted characters
            		//check string's size to be under 3 bytes
            	    //str.replaceAll("[^a-fA-F0-9]","");
            	
            	
            	    tempString = str.replaceAll("[^a-fA-F0-9]","");
            		if(!tempString.equals("")){
            		   valueUpdater(tempString);
            		}
            	           	//valueUpdater(str);
            		handler.postDelayed(this, 250);
            		

            		
            		registerReceiver(mReceiver, filter);
            	
            }
        });
          
        
    }
    
    public void pairedDevices() {
       
        Set<BluetoothDevice> devices = mBluetoothAdapter.getBondedDevices();
        list.clear();
        MAC.clear();
        for (BluetoothDevice device : devices) {
        	list.add(device.getName()+"\n"+device.getAddress());  
        	MAC.add(device.getAddress());
        	 }
    }
 
public void Connect(String MAC){
	
    	//blue = 1;
    	BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		device = mBluetoothAdapter.getRemoteDevice(MAC);
		//Toast.makeText(getApplicationContext(), "Connecting...", Toast.LENGTH_LONG).show();
		mBluetoothAdapter.cancelDiscovery();
		try {
            btSocket = device.createRfcommSocketToServiceRecord(MY_UUID);
/* Here is the part the connection is made, by asking the device to create a
 *  RfcommSocket (Unsecure socket I guess), It map a port for us or something 
 *  like that */
                        
			btSocket.connect();
			Toast.makeText(getApplicationContext(), "Connected", Toast.LENGTH_SHORT).show();
			circleConnected.setBackgroundResource(R.drawable.green_circle);
			displayNotification1();
			
			
		} catch (IOException e) {
			try {
				btSocket.close();
			} catch (IOException e2) {
				Toast.makeText(getApplicationContext(), "Unable to end the connection", Toast.LENGTH_LONG).show();
			}
			Toast.makeText(getApplicationContext(), "Socket creation failed", Toast.LENGTH_LONG).show();
		}
		
		try {
//			if(btSocket.isConnected()){
				outputStream = btSocket.getOutputStream();
				inputStream = btSocket.getInputStream();			
				beginListenForData();
//				}		

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
               /* this is a method used to read what the Arduino says for example when you write Serial.print("Hello world.") in your Arduino code */
	}
    
    
    private void writeData(String data) {
			try {
				outputStream = btSocket.getOutputStream();
				inputStream = btSocket.getInputStream();
				//beginListenForData();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		String message = data;
/* In my example, I put a button that invoke this method and send a string to it */
		byte[] msgBuffer = message.getBytes();

			try {
				outputStream.write(msgBuffer);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
    
    
    
    void beginListenForData()
    {
    	str = "0";
    	kevin = 1;
        final Handler handler = new Handler(); 
        final byte delimiter = 10; //This is the ASCII code for a newline character

        stopWorker = false;
        readBufferPosition = 0;
        readBuffer = new byte[1024];
        workerThread = new Thread(new Runnable()
        {
            public void run()
            {                
               while(!Thread.currentThread().isInterrupted() && !stopWorker)
               {
                    try 
                    {
                        int bytesAvailable = inputStream.available();                        
                        if(bytesAvailable > 0)
                        {
                            byte[] packetBytes = new byte[bytesAvailable];
                            inputStream.read(packetBytes);
                            for(int i=0;i<bytesAvailable;i++)
                            {
                                byte b = packetBytes[i];
                                if(b == delimiter)
                                {
                                	byte[] encodedBytes = new byte[readBufferPosition];
                                	System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
                                	final String data = new String(encodedBytes, "US-ASCII");
                                  	//final Integer data1 = new Integer(data);
                                  	
                                	readBufferPosition = 0;

                                    handler.post(new Runnable()
                                    {
                                        public void run()
                                        {
                                        	
                                        	//intData = data1;
                                        	//tempLabel.setText(data);
                                        	str = data.replaceAll("\\s+", "");
                                        	
                                        	
                                        }
                                    });
                                }
                                else
                                {
                                    readBuffer[readBufferPosition++] = b;
                                }
                            }
                        }
                    } 
                    catch (IOException ex) 
                    {
                        stopWorker = true;
                    }
               }
            }
        });

        workerThread.start();
    }
    
    
public void valueUpdater(String stringData){
	
	//int tempD = 0;
	int intData = 0;
	int tempF = 0;
	int tempB = 0;
	int tempC = 0;

	
	intData = Integer.parseInt(stringData,16);
	if(intData <= 0x2FF){
	
	tempF = intData & 0xFF;
	tempB = intData & 0x100;
	tempC = intData & 0x200;
	
	//Temperature Data Here
	val = "" + tempF;
	tempLabel.setText(val);//UPDATE DAT TEMP
	val = "";
	
	
	//Clip Data Here
	if(tempC > 0){
		
		//Yo change clip circle to green
		circleClip.setBackgroundResource(R.drawable.green_circle);
	}
	
	else{
		circleClip.setBackgroundResource(R.drawable.red_circle);
	}
	
	//Baby Data Here
	if(tempB > 0){
		
		circleBaby.setBackgroundResource(R.drawable.green_circle);
		baby = 1;
		//Yo change baby circle to green
	}
	else {
		circleBaby.setBackgroundResource(R.drawable.red_circle);
		baby = 0;
		//Yo change baby circle to red
	}

	}//end of 0x2FF if statement
	
}
    
final BroadcastReceiver mReceiver = new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();

        if (BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED.equals(action)) {
            //disconnect request
        } else if (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) {
        	Toast.makeText(getApplicationContext(), "Connection Lost", Toast.LENGTH_LONG).show();
        	circleConnected.setBackgroundResource(R.drawable.red_circle);
        	cancelNotification(notificationID1);
        	str = "0";
        	if(baby == 1){
        		turnOnSounds();
        		displayNotification2();        		
        		tx0.setEnabled(true);
        	}
        	//resetConnection();
        }
    }
};
    
private void resetConnection() {
    if (inputStream != null) {
            try {inputStream.close();} catch (Exception e) {}
            inputStream = null;
    }

    if (outputStream != null) {
            try {outputStream.close();} catch (Exception e) {}
            outputStream = null;
    }

    if (btSocket != null) {
            try {btSocket.close();} catch (Exception e) {}
            btSocket = null;
    }

}


public boolean isNameValid(String name) {
    return !validator.matcher(name).find();
}

public void turnOnSounds(){
    AudioManager amanager; 
    amanager = (AudioManager)getSystemService(AUDIO_SERVICE);
	//turn ringer silent
    amanager.setRingerMode(AudioManager.RINGER_MODE_NORMAL);

    // turn on sound, enable notifications
    amanager.setStreamMute(AudioManager.STREAM_SYSTEM, false);
    amanager.setStreamVolume(AudioManager.STREAM_SYSTEM, amanager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM), 0);
    //notifications
    amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, false);
    amanager.setStreamVolume(AudioManager.STREAM_NOTIFICATION, amanager.getStreamMaxVolume(AudioManager.STREAM_NOTIFICATION), 0);
    //alarm
    amanager.setStreamMute(AudioManager.STREAM_ALARM, false);
    amanager.setStreamVolume(AudioManager.STREAM_ALARM, amanager.getStreamMaxVolume(AudioManager.STREAM_ALARM), 0);
    //ringer
    amanager.setStreamMute(AudioManager.STREAM_RING, false);
    amanager.setStreamVolume(AudioManager.STREAM_RING, amanager.getStreamMaxVolume(AudioManager.STREAM_RING), 0);
    //media
    amanager.setStreamMute(AudioManager.STREAM_MUSIC, false);
    amanager.setStreamVolume(AudioManager.STREAM_MUSIC, amanager.getStreamMaxVolume(AudioManager.STREAM_MUSIC), 0);
	
}
public void turnOffSounds(){
    AudioManager amanager; 
    amanager = (AudioManager)getSystemService(AUDIO_SERVICE);
	//turn ringer silent
    amanager.setRingerMode(AudioManager.RINGER_MODE_NORMAL);

    // turn on sound, enable notifications
    amanager.setStreamMute(AudioManager.STREAM_SYSTEM, true);
    //notifications
    amanager.setStreamMute(AudioManager.STREAM_NOTIFICATION, true);
    //alarm
    amanager.setStreamMute(AudioManager.STREAM_ALARM, true);
    //ringer
    amanager.setStreamMute(AudioManager.STREAM_RING, true);
    //media
    amanager.setStreamMute(AudioManager.STREAM_MUSIC, true);
	
}
protected void displayNotification1() {
    //Log.i("Start", "notification");

    /* Invoking the default notification service */
    NotificationCompat.Builder  mBuilder = 
    new NotificationCompat.Builder(this);	

    mBuilder.setContentTitle("Connected");
    mBuilder.setContentText("You are now connected to Baby Saver");
    mBuilder.setTicker("Connected to Baby Saver");
    mBuilder.setSmallIcon(R.drawable.baby_hero);

    mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

    /* notificationID allows you to update the notification later on. */
    mNotificationManager.notify(notificationID1, mBuilder.build());
 }

protected void displayNotification2() {
    //Log.i("Start", "notification");

    /* Invoking the default notification service */
    NotificationCompat.Builder  mBuilder = 
    new NotificationCompat.Builder(this);
    
    Uri soundUri = Uri.parse("android.resource://com.babycartest/raw/cry_sound");
    
    mBuilder.setContentTitle("BABY IN THE CAR");
    mBuilder.setContentText("YOU'RE A MURDERER");
    mBuilder.setTicker("YOU LEFT YOUR BABY");
    mBuilder.setSound(soundUri);
    mBuilder.setSmallIcon(R.drawable.alarm);

    mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

    /* notificationID allows you to update the notification later on. */
    mNotificationManager.notify(notificationID2, mBuilder.build());
 }

protected void cancelNotification(int notificationID){
	
	mNotificationManager.cancel(notificationID);
	
}

public void playSound(){
	try {
	    Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
	    Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
	    r.play();
	} catch (Exception e) {
	    e.printStackTrace();
	}
	
}

}

